<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_codereviewer.CodeReviewer</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CodeReviewer</name>
        <script><![CDATA[var CodeReviewer = Class.create();
CodeReviewer.prototype = {
    initialize: function() {
    },

	requestReview : function(current) {

		try {
			if (!current.isValidRecord()) {
				gs.error("[CodeReviewer] \"current\" is not a valid record");
				return null;
			}

			
			var alreadyRequested = new Condition().hasOpenRequest(current);
			if (alreadyRequested) {
				gs.addErrorMessage("This application file has already been requested for code review");
				return null;
			}

			var requestedReviewTask = this._createTask(current);
			
			if (requestedReviewTask.isValidRecord()) {
				this._startWorkflow(requestedReviewTask);
			}
			
			return requestedReviewTask;

		}
		catch (ex) {
			gs.error("[requestReview] " + ex);
			return null;
		}
	},

	nextReviewer : function (current){
		
		//set the m2m that is pending to reject.
		current.state = '-5';
		current.assigned_to = "NULL";
		current.update();
		
		this._setRejectForPending(current);
	
		var rules = new AssignmentRules();
		var reviewer = rules.getReviewer(current.getValue('sys_scope'), current.getValue('sys_class_name'), current);
		
		//lag till i M2M, assign_to to empty.
		this._createM2MUserTask(reviewer, current);


	},
	
	_setRejectForPending: function (task) {
		var gr = new GlideRecord("x_snc_codereviewer_m2m_users_tasks");
		gr.addQuery("task", task.getValue('sys_id'));
		gr.addQuery("u_state", "pending");
		gr.query();
		
		while (gr.next()) {
			gs.debug("task : " + gr.getDisplayValue('task') + ', state : ' + gr.getValue('u_state'));
			
		   gr.setValue('u_state', 'reject');
		   gr.update();
		}
	},
	
	_createTask : function (current) {

		if (!current.isValidRecord()) {
			gs.error("[CodeReviewer] \"current\" is not a valid record");
			return null;
		}

		var rules = new AssignmentRules();
		var reviewer = rules.getReviewer(current.getValue('sys_scope'), current.getValue('sys_class_name'), null);
		
		var gdt = new GlideDateTime();
		gdt.addDaysLocalTime(gs.getProperty('x_snc_codereviewer.number_of_days'));
		
		gs.debug("[CodeReviewer] Calculated due date: " + gdt);
		
		var requestReviewTask = new GlideRecord("x_snc_codereviewer_task");
		requestReviewTask.initialize();		
		requestReviewTask.setValue('due_date', gdt);
		requestReviewTask.setValue('to_be_reviewed', current.getValue('sys_id'));
		requestReviewTask.setValue('short_description', current.getValue('name'));
		requestReviewTask.setValue('reviewer', reviewer.getValue('sys_id'));

		if (requestReviewTask.insert()) {
			this._createM2MUserTask(reviewer, requestReviewTask);
			
			gs.info("[CodeReviewer] New Code Review Task created: " + requestReviewTask.number);
			return requestReviewTask;
		}
		else {
			gs.error("[CodeReviewer] Failed to create review task");
			return null;
		}
	},
		
	_createM2MUserTask : function (user, task){
	
		var m2m = new GlideRecord("x_snc_codereviewer_m2m_users_tasks");
		m2m.initialize();		
		m2m.setValue('user', user.getValue('sys_id'));
		m2m.setValue('task', task.getValue('sys_id'));
		m2m.setValue('u_glide_date_time_2', new GlideDateTime());
		
		if(m2m.insert()){
			gs.info("[_createM2MUserTask] New M2M User Task created: " + m2m.getValue('sys_id'));
			return m2m;
		}
		else {
			gs.error("[_createM2MUserTask] Failed to M2M User Task");
			return null;
		}
	},
	
	_startWorkflow: function(reviewTask) {

		gs.info("[_startWorkflow] Starting Workflow for " + reviewTask.number);
		
		var workflowId = gs.getProperty('x_snc_codereviewer.workflow');
		var w = new global.Workflow();
		var context = w.startFlow(workflowId, reviewTask, 'insert', {});
		
		return context;
	},
	
    type: 'CodeReviewer'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-05-09 16:05:24</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>bde4037e4f2e7600dcfa01b18110c7af</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>CodeReviewer</sys_name>
        <sys_package display_value="CodeReviewer" source="x_snc_codereviewer">80e372b24f2e7600dcfa01b18110c7fd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="CodeReviewer">80e372b24f2e7600dcfa01b18110c7fd</sys_scope>
        <sys_update_name>sys_script_include_bde4037e4f2e7600dcfa01b18110c7af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-09 22:00:29</sys_updated_on>
    </sys_script_include>
</record_update>
